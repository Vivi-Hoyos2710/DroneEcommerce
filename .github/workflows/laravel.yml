name: Laravel

on:
  push:
    branches: ["main", "develop", "feature/f19_CICD"]
  pull_request:
    branches: ["main", "develop", "feature/f19_CICD"]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: "8.2.11"
      - uses: actions/checkout@v3

      # Set up the pipeline
      - name: Copy .env
        working-directory: ./src
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        working-directory: ./src
        run: |
          composer update
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Generate key
        working-directory: ./src
        run: php artisan key:generate

      - name: Directory Permissions
        working-directory: ./src
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        working-directory: ./src
        run: |
          mkdir -p database
          touch database/database.sqlite

      # Run unit tests
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        working-directory: ./src
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit

      # Pint and lint!
      - name: "laravel-pint"
        working-directory: ./src
      - uses: aglipanci/laravel-pint-action@0.1.0
        with:
          preset: laravel
          verboseMode: true
          configPath: "vendor/DRONE-project/pint.json"

      - name: Commit changes
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: PHP Linting (Pint)
          skip_fetch: true

      # Docker related stuff
      - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_REPO: jdramirezl/drone
        run: |
          docker login -u "$DOCKER_USERNAME" -p $DOCKER_PASSWORD
          docker build . --file Dockerfile --tag $DOCKER_REPO:latest.
          docker push $DOCKER_REPO
